// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @unique @default(uuid())
  email          String          @unique
  name           String
  password       String
  created_at     DateTime        @default(now())
  RefreshToken   RefreshToken[]
  Expense        Expense[]
  PaymentMethod  PaymentMethod[]
  ExpenseClasses ExpenseClass[]
  OwnedGroup     Group[]
  userGroup      GroupUser[]
}

model RefreshToken {
  id         String   @id @unique @default(uuid())
  issued_at  DateTime @default(now())
  expires_at DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Expense {
  id              String        @id @unique @default(uuid())
  name            String
  value           Decimal
  description     String?
  date            DateTime      @default(now())
  PaymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  ExpenseClass    ExpenseClass  @relation(fields: [expenseClassId], references: [id])
  paymentMethodId String
  expenseClassId  String
  User            User          @relation(fields: [userId], references: [id])
  userId          String
}

model PaymentMethod {
  id         String    @id @unique @default(uuid())
  type       String
  label      String
  last4      String?
  created_at DateTime  @default(now())
  Expense    Expense[]
  User       User      @relation(fields: [userId], references: [id])
  userId     String
}

model ExpenseClass {
  id      String    @id @unique @default(uuid())
  name    String
  Expense Expense[]
  User    User      @relation(fields: [userId], references: [id])
  userId  String
}

model Group {
  id          String      @id @unique @default(uuid())
  name        String
  description String?
  createdAt   DateTime    @map("created_at")
  owner       User        @relation(fields: [ownerId], references: [id])
  ownerId     String      @map("owner_id")
  groupUser   GroupUser[]
}

enum Permission {
  EDIT
  VIEW
}

model GroupUser {
  Group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String @map("id_group")
  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @map("id_user")

  permission Permission @default(VIEW)

  @@id([groupId, userId])
}
