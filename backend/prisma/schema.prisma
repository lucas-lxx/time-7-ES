// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email          String          @id @unique
  name           String
  password       String
  created_at     DateTime        @default(now())
  RefreshToken   RefreshToken[]
  Expense        Expense[]
  PaymentMethod  PaymentMethod[]
  ExpenseClasses ExpenseClass[]
}

model RefreshToken {
  id         String   @id @unique @default(uuid())
  issued_at  DateTime @default(now())
  expires_at DateTime
  user       User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail  String
}

model Expense {
  id              String        @id @unique @default(uuid())
  name            String
  value           Decimal
  description     String?
  date            DateTime      @default(now())
  user            User          @relation(fields: [userEmail], references: [email])
  PaymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  ExpenseClass    ExpenseClass  @relation(fields: [expenseClassId], references: [id])
  userEmail       String
  paymentMethodId String
  expenseClassId  String
}

model PaymentMethod {
  id         String    @id @unique @default(uuid())
  type       String
  label      String
  last4      String?
  created_at DateTime  @default(now())
  user       User      @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail  String
  Expense    Expense[]
}

model ExpenseClass {
  id        String    @id @unique @default(uuid())
  name      String
  Expense   Expense[]
  User      User?     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String?
}
